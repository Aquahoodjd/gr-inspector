/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(signal_detector_cvf.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(58cc2d96d45fd2c15debf81fc2af08a1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/inspector/signal_detector_cvf.h>
// pydoc.h is automatically generated in the build directory
#include <signal_detector_cvf_pydoc.h>

void bind_signal_detector_cvf(py::module& m)
{

    using signal_detector_cvf    = ::gr::inspector::signal_detector_cvf;


    py::class_<signal_detector_cvf, gr::sync_decimator,
        std::shared_ptr<signal_detector_cvf>>(m, "signal_detector_cvf", D(signal_detector_cvf))

        .def(py::init(&signal_detector_cvf::make),
           py::arg("samp_rate"),
           py::arg("fft_len") = 1024,
           py::arg("window_type") = 0,
           py::arg("threshold") = 0.69999999999999996,
           py::arg("sensitivity") = 0.20000000000000001,
           py::arg("auto_threshold") = true,
           py::arg("average") = 0.80000000000000004,
           py::arg("quantization") = 0.01,
           py::arg("min_bw") = 0.,
           py::arg("filename") = "",
           D(signal_detector_cvf,make)
        )
        




        
        .def("set_samp_rate",&signal_detector_cvf::set_samp_rate,       
            py::arg("d_samp_rate"),
            D(signal_detector_cvf,set_samp_rate)
        )


        
        .def("set_fft_len",&signal_detector_cvf::set_fft_len,       
            py::arg("fft_len"),
            D(signal_detector_cvf,set_fft_len)
        )


        
        .def("set_window_type",&signal_detector_cvf::set_window_type,       
            py::arg("d_window"),
            D(signal_detector_cvf,set_window_type)
        )


        
        .def("set_threshold",&signal_detector_cvf::set_threshold,       
            py::arg("d_threshold"),
            D(signal_detector_cvf,set_threshold)
        )


        
        .def("set_sensitivity",&signal_detector_cvf::set_sensitivity,       
            py::arg("d_sensitivity"),
            D(signal_detector_cvf,set_sensitivity)
        )


        
        .def("set_auto_threshold",&signal_detector_cvf::set_auto_threshold,       
            py::arg("d_auto_threshold"),
            D(signal_detector_cvf,set_auto_threshold)
        )


        
        .def("set_average",&signal_detector_cvf::set_average,       
            py::arg("d_average"),
            D(signal_detector_cvf,set_average)
        )

        ;




}








