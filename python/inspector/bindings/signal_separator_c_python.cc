/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(signal_separator_c.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(730bc5a1d9d718ce4f7e3380ea16614c)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/inspector/signal_separator_c.h>
// pydoc.h is automatically generated in the build directory
#include <signal_separator_c_pydoc.h>

void bind_signal_separator_c(py::module& m)
{

    using signal_separator_c    = ::gr::inspector::signal_separator_c;


    py::class_<signal_separator_c, gr::block, gr::basic_block,
        std::shared_ptr<signal_separator_c>>(m, "signal_separator_c", D(signal_separator_c))

        .def(py::init(&signal_separator_c::make),
           py::arg("samp_rate"),
           py::arg("window"),
           py::arg("trans_width"),
           py::arg("oversampling"),
           py::arg("taps_file"),
           py::arg("file_path"),
           D(signal_separator_c,make)
        )
        




        
        .def("set_samp_rate",&signal_separator_c::set_samp_rate,       
            py::arg("d_samp_rate"),
            D(signal_separator_c,set_samp_rate)
        )


        
        .def("set_window",&signal_separator_c::set_window,       
            py::arg("d_window"),
            D(signal_separator_c,set_window)
        )


        
        .def("set_trans_width",&signal_separator_c::set_trans_width,       
            py::arg("d_trans_width"),
            D(signal_separator_c,set_trans_width)
        )


        
        .def("set_oversampling",&signal_separator_c::set_oversampling,       
            py::arg("d_oversampling"),
            D(signal_separator_c,set_oversampling)
        )

        ;




}








