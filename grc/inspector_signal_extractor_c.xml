<block>
  <name>Signal Extractor</name>
  <key>inspector_signal_extractor_c</key>
  <category>[Inspector]/Conditioning</category>
  <import>import inspector</import>
  <make>inspector.signal_extractor_c($signal, $resample, $rate, $osf)</make>
  <callback>set_signal($signal)</callback>
  <param>
    <name>Signal</name>
    <key>signal</key>
    <type>int</type>
  </param>
  <param>
    <name>Resample signal</name>
    <key>resample</key>
    <value>False</value>
    <type>bool</type>
    <option>
      <name>On</name>
      <key>True</key>
    </option>
    <option>
      <name>Off</name>
      <key>False</key>
    </option>
  </param>
  <param>
    <name>Output samp rate</name>
    <key>rate</key>
    <value>48000</value>
    <type>real</type>
    <hide>#if str($resample) == 'True' then 'none' else 'all'#</hide>
  </param>
  <param>
    <name>Oversampling</name>
    <key>osf</key>
    <value>1</value>
    <type>real</type>
    <hide>#if str($resample) == 'True' then 'none' else 'all'#</hide>
  </param>
  <sink>
    <name>sig_in</name>
    <type>message</type>
  </sink>
  <sink>
    <name>map_in</name>
    <type>message</type>
    <optional>1</optional>
  </sink>
  <source>
    <name>out</name>
    <type>complex</type>
  </source>
  <doc>
Signal Extractor block is able to extract signal samples for specified signal out of message passed by Signal Separator block. These messages contain the samples of all detected signals. This block only passes the ones beloging to the specified signal number as a complex stream. This way, custom signal chains can be appended after the inspector blocks.

If the resample option is used, the block will try to resample the input samples based on the message input from the map port to the desired output sample rate. An oversampling factor can be taken into account, if the input samples are oversampled by the signal separator.
  </doc>
</block>
